trigger:
  branches:
    include:
      - master  # Activa el pipeline cuando hay cambios en la rama master

variables:
  dockerRegistry: 'testproject.azurecr.io'  # Usa tu Azure Container Registry
  apiImageName: 'testproject-api'           # Nombre de la imagen de Docker para la API .NET Core
  webImageName: 'toygame-front'             # Nombre de la imagen de Docker para el frontend Angular
  apiAppName: 'testproject-api-app'         # Nombre de la aplicación web en Azure para la API
  webAppName: 'toygame-front-app'           # Nombre de la aplicación web en Azure para el frontend Angular

stages:
  - stage: Build
    displayName: 'Build Docker Images'
    jobs:
      - job: Build
        displayName: 'Build and Push Docker Images'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Paso 1: Iniciar sesión en Azure Container Registry
          - task: Docker@2
            inputs:
              command: 'login'
              containerRegistry: 'testproject-acr-connection'  # Nombre de la conexión de servicio para ACR

          # Paso 2: Construir y publicar la imagen de Docker para la API .NET Core
          - task: Docker@2
            inputs:
              containerRegistry: 'testproject-acr-connection'  # Usa la conexión de servicio
              repository: '$(apiImageName)'
              command: 'buildAndPush'
              Dockerfile: 'Dockerfile'  # Ruta al Dockerfile de la API
              tags: |
                $(Build.BuildId)
                latest

          # Paso 3: Construir y publicar la imagen de Docker para el frontend Angular
          - task: Docker@2
            inputs:
              containerRegistry: 'testproject-acr-connection'  # Usa la conexión de servicio
              repository: '$(webImageName)'
              command: 'buildAndPush'
              Dockerfile: 'ToysGamesFront/ClientApp/Dockerfile'  # Ruta al Dockerfile del frontend Angular
              tags: |
                $(Build.BuildId)
                latest

  - stage: Deploy
    displayName: 'Deploy to Azure Web Apps'
    dependsOn: Build
    jobs:
      - job: DeployAPI
        displayName: 'Deploy API to Azure Web App'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Paso 4: Desplegar la API .NET Core en Azure Web App
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: 'Azure subscription 1'  # Nombre de la conexión de servicio de Azure
              appName: '$(apiAppName)'
              containers: '$(dockerRegistry)/$(apiImageName):$(Build.BuildId)'

      - job: DeployWeb
        displayName: 'Deploy Angular App to Azure Web App'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Paso 5: Desplegar la aplicación Angular en Azure Web App
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: 'Azure subscription 1'  # Nombre de la conexión de servicio de Azure
              appName: '$(webAppName)'
              containers: '$(dockerRegistry)/$(webImageName):$(Build.BuildId)'